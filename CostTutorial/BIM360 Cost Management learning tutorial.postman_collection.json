{
	"info": {
		"_postman_id": "d02860a2-2a6f-4e68-b018-d89ab621c0c0",
		"name": "BIM360 Cost Management learning tutorial",
		"description": "The collection together with the environment shows you how to create a new budget with contract, and also create a change order with a couple of cost items, then you can use the available \"Action\" applied on the change order to change the status of the change order.\n\nSteps to operate with the endpoints:\n1. Step up the environment, please create a Forge App, and copy|paste \"client_id\", \"client_secret\" to the enviornment vailbale, and set the \"project_name\" to the name which you want to operate.\n\n2. Before using the collection, please add the Authorization for the collection, click \"Edit Collection\", go to \"Authorization\" tab, make sure to use \"OAuth 2.0\" to get a 3 legged token, and use it in the \"Request Headers\".\n\n3. Follow step 1 to step 5 to create a budget which assigned to a contract, also create a cost item that will be attached to change orders in the following step.\n\n4. Iterate to do step 6 ~ step 11 to get different change order types, and create the different orders then perform action on that based on your workflow.\n\t- PCO -> RFQ -> SCO\n\t- PCO -> RCO -> OCO -> SCO",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Step 0: Reset the environment variables",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a2871248-36c1-45ed-b2e8-27d12cfe521d",
						"exec": [
							"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "da24b000-02d8-4199-afda-a9390e1fb385",
						"exec": [
							"pm.environment.clear();",
							"",
							"// Please change the following variables according to your account setting",
							"// your Forge App key",
							"pm.environment.set(\"client_id\",     \"your_forge_client_id\");",
							"pm.environment.set(\"client_secret\", \"your_forge_client_secret\");",
							"",
							"// Change to the specified project name",
							"pm.environment.set(\"project_name\", \"Change to your project name\");",
							"",
							"pm.environment.set(\"base_domain\", \"https://developer.api.autodesk.com/\");",
							"",
							"pm.environment.set(\"changeOrder_index\", 0);",
							"pm.environment.set(\"action_association_type\", \"FormInstance\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "VIEW",
				"header": [],
				"url": {
					"raw": "{{base_domain}}/health",
					"host": [
						"{{base_domain}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Reset the following environment variables:\n1. Forge Client Key, please change to your Forge Client Id and Secret.\n2. Project name, please change to the correct project name which you want to work with.\n3. Base domain, should be https://developer.api.autodesk.com/ by default.\n4. Segment index, will be used to create multiple budget segments, should be 1 by default."
			},
			"response": []
		},
		{
			"name": "Step 1: Find all hubs within your account",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0400edee-9407-4539-a629-7f92f73ce24e",
						"exec": [
							"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
							"",
							"// setup the environment variable \"hub_id\" and \"account_id\" with the 1st BIM360 hub",
							"var responseBody = JSON.parse(responseBody);",
							"var bim_hub = responseBody.data.find( hub =>  hub.id.indexOf(\"b.\") !== -1);",
							"if(bim_hub !== null ){",
							"    ",
							"    pm.environment.set(\"hub_id\",     bim_hub.id);",
							"    pm.environment.set(\"account_id\", bim_hub.id.split('b.').join(''));",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8cfa97b8-c4f1-4a80-90e2-50e3e7a1dadb",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_domain}}/project/v1/hubs",
					"host": [
						"{{base_domain}}"
					],
					"path": [
						"project",
						"v1",
						"hubs"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 2: Find projects within a BIM360 hub",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e9eaa388-e0e3-4a45-88b1-447388b8b427",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d8af22df-95cf-4ba1-9858-aa483c84b543",
						"exec": [
							"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
							"",
							"// find the specified project and setup the environment variable \"project_id\"",
							"var project_name =  pm.environment.get(\"project_name\");",
							"var responseBody = JSON.parse(responseBody);",
							"var project = responseBody.data.find(d => d.attributes.name == project_name)",
							"if( project ){",
							"    postman.setEnvironmentVariable(\"project_id\", project.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_domain}}/project/v1/hubs/{{hub_id}}/projects?page[limit]=200",
					"host": [
						"{{base_domain}}"
					],
					"path": [
						"project",
						"v1",
						"hubs",
						"{{hub_id}}",
						"projects"
					],
					"query": [
						{
							"key": "page[limit]",
							"value": "200"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 3: Get the project and setup cost container id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25d5a645-4c36-4dd6-82a9-3c26136f9985",
						"exec": [
							"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
							"",
							"// setup the environment variable \"cost_container_id\"",
							"var responseBody = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"cost_container_id\", responseBody.data.relationships.cost.data.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_domain}}/project/v1/hubs/{{hub_id}}/projects/{{project_id}}",
					"host": [
						"{{base_domain}}"
					],
					"path": [
						"project",
						"v1",
						"hubs",
						"{{hub_id}}",
						"projects",
						"{{project_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 4: Create a new budget",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46ec695e-7cdf-42c4-b69d-678f48fc65c7",
						"exec": [
							"pm.test(\"Status code is 201\", function () { pm.response.to.have.status(201); });",
							"",
							"// setup the environment variable \"budget_id\"",
							"var data = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"budget_id\", data.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"parentId\": null,\n        \"code\": \"1111122222333334444455555\",\n        \"name\": \"My 1st Budget\",\n        \"description\": \"new\",\n        \"quantity\": 10,\n        \"unitPrice\": \"1000.0000\",\n        \"unit\": \"LS\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_domain}}cost/v1/containers/{{cost_container_id}}/budgets",
					"host": [
						"{{base_domain}}cost"
					],
					"path": [
						"v1",
						"containers",
						"{{cost_container_id}}",
						"budgets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 5: Create a new contract and assign to a budget",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cfca5644-3012-4e47-af4d-9e20bf186a36",
						"exec": [
							"pm.test(\"Status code is 201\", function () { pm.response.to.have.status(201); });",
							"",
							"// setup the environment variable \"contract_id\"",
							"var data = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"contract_id\", data.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\n{\n        \"code\": \"GC-01\",\n        \"name\": \"My 1st Contract\",\n        \"description\": \"Site Management Staff\",\n        \"type\": \"consultant\",\n        \"budgets\": [\n        \t{ \n        \t\t\"id\": \"{{budget_id}}\"\n        \t}\n        ]\n      }"
				},
				"url": {
					"raw": "{{base_domain}}cost/v1/containers/{{cost_container_id}}/contracts",
					"host": [
						"{{base_domain}}cost"
					],
					"path": [
						"v1",
						"containers",
						"{{cost_container_id}}",
						"contracts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 6: Create a new cost item and assign to a budget",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d3a9e2af-0bc3-4d81-9bc4-9f4fa42fc1fe",
						"exec": [
							"pm.test(\"Status code is 201\", function () { pm.response.to.have.status(201); });",
							"",
							"// setup the environment variable \"costItem_id\"",
							"var responseBody = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"costItem_id\", responseBody.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"name\": \"My 1st cost item\",\n        \"description\": \"1st cost item\",\n        \"estimated\": \"1000.0000\",\n        \"proposed\": \"1000.0000\",\n        \"submitted\": \"1000.0000\",\n        \"approved\": \"1000.0000\",\n        \"committed\": \"1000.0000\",\n        \"budgetId\": \"{{budget_id}}\",\n        \"scope\": \"in\"\n      }"
				},
				"url": {
					"raw": "{{base_domain}}cost/v1/containers/{{cost_container_id}}/cost-items",
					"host": [
						"{{base_domain}}cost"
					],
					"path": [
						"v1",
						"containers",
						"{{cost_container_id}}",
						"cost-items"
					]
				}
			},
			"response": []
		},
		{
			"name": "Iterate from Step 7 ~ Step 11",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d3a9e2af-0bc3-4d81-9bc4-9f4fa42fc1fe",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "VIEW",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_domain}}/health",
					"host": [
						"{{base_domain}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Use different \"changeOrder_type\" to create differnt change order and execute actions on that. You can create different change order typs(Pco, Rfq, Rco, Oco, Sco) by following the workflow."
			},
			"response": []
		},
		{
			"name": "Step 7: Find change order types",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a4e53751-f00d-4046-b0a3-6e96e91b5739",
						"exec": [
							"pm.test(\"Status code is 200\", function () { ",
							"    pm.response.to.have.status(200); ",
							"});",
							"",
							"var responseBody = JSON.parse(responseBody);",
							"",
							"var index = pm.environment.get(\"changeOrder_index\");",
							"// stop postman collection runner while index is out of range",
							"if( index < responseBody.length - 1 ){",
							"    pm.environment.set(\"changeOrder_type\", responseBody[index].type);",
							"    pm.environment.set(\"changeOrder_index\", index+1);",
							"}else{",
							"    pm.environment.set('Stop the collection');",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d2f078d5-d413-4f91-b8f5-e9d263933bc0",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_domain}}cost/v1/containers/{{cost_container_id}}/change-orders",
					"host": [
						"{{base_domain}}cost"
					],
					"path": [
						"v1",
						"containers",
						"{{cost_container_id}}",
						"change-orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 8: Create a new change order",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d3a9e2af-0bc3-4d81-9bc4-9f4fa42fc1fe",
						"exec": [
							"pm.test(\"Status code is 201\", function () { ",
							"    pm.response.to.have.status(201); ",
							"});",
							"",
							"// setup the environment variable \"changeOrder_id\"",
							"var responseBody = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"changeOrder_id\", responseBody.id);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "edbc30b2-8e55-41f1-ae93-65b9b3eaf3b2",
						"exec": [
							"",
							"const changeOrder_type = pm.environment.get(\"changeOrder_type\");",
							"const changeOrder_name = \"My Fist \" + changeOrder_type;",
							"pm.environment.set(\"changeOrder_name\", changeOrder_name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"{{changeOrder_name}}\",\n\t\"description\": \"This is used for tutorial test\",\n    \"scopeOfWork\": \"Scope of work\",\n    \"note\": \"note\",\n    \"scope\": \"in\",\n    \"contractId\": \"{{contract_id}}\"\n}"
				},
				"url": {
					"raw": "{{base_domain}}cost/v1/containers/{{cost_container_id}}/change-orders/{{changeOrder_type}}",
					"host": [
						"{{base_domain}}cost"
					],
					"path": [
						"v1",
						"containers",
						"{{cost_container_id}}",
						"change-orders",
						"{{changeOrder_type}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 9: Attach a cost Item to a change order",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d3a9e2af-0bc3-4d81-9bc4-9f4fa42fc1fe",
						"exec": [
							"pm.test(\"Status code is 200\", function () { ",
							"    pm.response.to.have.status(200); ",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n        {\n          \"changeOrderId\": \"{{changeOrder_id}}\",\n          \"costItemId\": \"{{costItem_id}}\"\n        }\n]"
				},
				"url": {
					"raw": "{{base_domain}}cost/v1/containers/{{cost_container_id}}/cost-items:attach",
					"host": [
						"{{base_domain}}cost"
					],
					"path": [
						"v1",
						"containers",
						"{{cost_container_id}}",
						"cost-items:attach"
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 10: Get all available actions for the change order",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d3a9e2af-0bc3-4d81-9bc4-9f4fa42fc1fe",
						"exec": [
							"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
							"",
							"// setup the environment variable \"action_name\"",
							"var responseBody = JSON.parse(responseBody);",
							"",
							"// execute the action on the change order, if the action is done for this change order, go back to step 7 to start a new change order.",
							"if(responseBody.length === 0 || responseBody[0].name == \"reject\" || responseBody[0].name == \"acceptedToSubmit\" || responseBody[0].name == \"forceResubmit\"  ){",
							"    postman.setNextRequest('Step 7: Find change order types');",
							"}else{",
							"    postman.setEnvironmentVariable(\"action_name\", responseBody[0].name);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d7d8e12e-2ac3-41cb-8fd4-188c92561507",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_domain}}cost/v1/containers/{{cost_container_id}}/workflows/{{action_association_type}}/{{changeOrder_id}}/actions",
					"host": [
						"{{base_domain}}cost"
					],
					"path": [
						"v1",
						"containers",
						"{{cost_container_id}}",
						"workflows",
						"{{action_association_type}}",
						"{{changeOrder_id}}",
						"actions"
					],
					"query": [
						{
							"key": "filter[actionType]",
							"value": "generateChangeOrder",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Step 11: Execute an action on change order",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d3a9e2af-0bc3-4d81-9bc4-9f4fa42fc1fe",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"postman.setNextRequest('Step 10: Get all available actions for the change order');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n      \"action\": \"{{action_name}}\",\n      \"associationId\": \"{{changeOrder_id}}\",\n      \"associationType\": \"{{action_association_type}}\",\n      \"options\": {}\n    }\n]"
				},
				"url": {
					"raw": "{{base_domain}}cost/v1/containers/{{cost_container_id}}/workflows/actions",
					"host": [
						"{{base_domain}}cost"
					],
					"path": [
						"v1",
						"containers",
						"{{cost_container_id}}",
						"workflows",
						"actions"
					],
					"query": [
						{
							"key": "filter[name]",
							"value": "Type",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "eyJhbGciOiJIUzI1NiIsImtpZCI6Imp3dF9zeW1tZXRyaWNfa2V5In0.eyJzY29wZSI6WyJkYXRhOndyaXRlIiwiZGF0YTpyZWFkIiwiYWNjb3VudDpyZWFkIiwiYWNjb3VudDp3cml0ZSJdLCJjbGllbnRfaWQiOiJvR1hFTXl6aUFDVkpmTzBLSWdkUWgzVkRMSHhXbmtzTyIsImdyYW50X2lkIjoiVkdVSUlKUkU1anJkb3RCYUxZdjdPMU02S0JMc0dJdkQiLCJhdWQiOiJodHRwczovL2F1dG9kZXNrLmNvbS9hdWQvand0ZXhwNjAiLCJqdGkiOiI4NjhyWVNyMU5JMkxkdFZhMjhtU1JsbUFNWG4zWENBSnQwb3Z2V2tnRVN6N2N5YlR1aUtTZ05waGs4WjE2bmtsIiwidXNlcmlkIjoiNFY0V0tRSkdHUTdOIiwiZXhwIjoxNTg5MzU4MTM0fQ.laFqwLeiavUkEcytrAcnWVL6FtmLzldDVb50MZQqa9A",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6461e641-e785-4fdb-9a0a-3657670dfef1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3d21282b-9014-4f97-84d5-566c463eb454",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}